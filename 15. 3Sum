class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        ans = set() # set automatically handles duplicate values so all elements will be unique
        n, p, z = [], [], []
        for num in nums:
            if num > 0:
                p.append(num)
            elif num == 0:
                z.append(num)
            else:
                n.append(num)
                
        N, P = set(n), set(p) # set allows to O(1) lookup

        if len(z) >= 3: # if 3 zeros exist
            ans.add((0,0,0)) # use tuples as lists cannot be put into a set

        # if have at least one 0 in solution    
        if z:
            for num in P: # all num in P are unique
                if num*-1 in N:
                    ans.add((num, 0, num*-1))

        # if have two +ve numbers in solution
        for i in range(len(p)):
            for j in range(i+1, len(p)):
                if (p[i]+p[j])*-1 in N:
                    ans.add(tuple(sorted([p[i], p[j], (p[i]+p[j])*-1])))
        # if have two -ve numbers in solution
        for i in range(len(n)):
            for j in range(i+1, len(n)):
                if (n[i]+n[j])*-1 in P:
                    ans.add(tuple(sorted([n[i], n[j], (n[i]+n[j])*-1])))

        return list(ans)
                
