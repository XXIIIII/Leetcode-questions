# Heap approach,  Time complexity: O(min(k⋅logk,m⋅n⋅log(m⋅n)))
class Solution(object):
    def kSmallestPairs(self, nums1, nums2, k):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :type k: int
        :rtype: List[List[int]]
        """
        ans = []
        heap = []
        visited = set() # using the method (i, j+1), (i+1, j), it is possible to have repeated values
        i = 0
        j = 0
        heapq.heappush(heap, (nums1[i]+nums2[j], [i, j]))
        visited.add((i, j))
        while len(ans) < k:
            min = heapq.heappop(heap)
            i = min[1][0]
            j = min[1][1]
            ans.append([nums1[i], nums2[j]])
            if i+1 < len(nums1) and (i+1, j) not in visited:
                heapq.heappush(heap, (nums1[i+1]+nums2[j], [i+1, j]))
                visited.add((i+1, j)) 
            if j+1 < len(nums2) and (i, j+1) not in visited:
                heapq.heappush(heap, (nums1[i]+nums2[j+1], [i, j+1]))
                visited.add((i, j+1)) 
            # print(heap)
    
    
        return ans
    
    
        
