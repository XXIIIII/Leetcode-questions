//#1 approach 
//time complexity O(logn)
//using binary search, first find the left starting point .After found, set left = left starting point, then use the same way to find the right starting point
int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int *output = (int *)malloc(2*sizeof(int));
    output[0] = -1;
    output[1] = -1;
    *returnSize = 2;
    int left = 0;
    int right = numsSize - 1;
    int mid;
   
    while(left <= right){
        mid = (left + right)/2;
        if(nums[mid] > target) right = mid - 1;
        else {
            if(nums[mid]< target) {
                left = mid + 1;
            }
            else{
                if(mid - 1 < 0 || nums[mid-1] != target){
                    output[0] = mid;
                    
                    left = mid;
                    break;   
                }
                else{
                    right = mid - 1;
                }
                }
            }
                
        }
        
    
    right = numsSize - 1;
    if (output[0] != -1){
          while(left <= right){
            mid = (left + right)/2;
            if(nums[mid] > target) right = mid - 1;
            else {
                if(nums[mid]< target) {
                    left = mid + 1;
                }
                else{
                    if(mid + 1 > numsSize - 1 || nums[mid+1] != target){
                        output[1] = mid;
                        
                        break;
                        
                    }
                    else{
                    left = mid + 1;
                    }
                    
                    }
                }
                    
            }
            
        }
    
  
   
    return output;
}
