# O(n)
class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_length = 0
        table = {0:0}
        count = 0
        for index, num in enumerate(nums, 1):
            if num == 0:
                count -= 1
            else:
                count += 1
            
            if count in table:
                max_length = max(max_length, index - table[count])
            else:   
                table[count] = index # Record first occurence of this count 
        return max_length
        

# TLE O(n^2)
class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        for i in range(1,  len(nums)):
            nums[i] = nums[i] + nums[i-1]
        max = 0
        for i in range(len(nums)-1):
            if max >= len(nums) - i:
                break
            for j in range(i+1, len(nums)):
                if i == 0 and (j-i) % 2 != 0 and nums[j] == (j-i+1)/2:
                    if j-i+1 > max:
                        max = j-i+1 
                elif (j-i) % 2 != 0 and nums[j] - nums[i-1] == (j-i+1)/2:
                    print(i, j)
                    if j-i+1 > max:
                        max = j-i+1 
        return max
