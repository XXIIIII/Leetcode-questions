// my code 
//#1 approach
// time complexity O(n^2)
int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int *output = (int *)malloc(2*sizeof(int));
    int remain = 0;
    *returnSize = 2;
    for(int i = 0; i < numsSize; i++){
        remain = target - nums[i];
        for(int j = i+1; j < numsSize; j++){
            if(nums[j] == remain){
                output[0] = i;
                output[1] = j;
                return output;
            }
        }
    }
    return NULL;
}

//#2 approach
//overall time complexity O(nlogn)
//first sort the array in ascending order -- O(nlogn)
//set two pointers at both ends, if  a[left] + a[right] < sum, then left++. if > sum, then right--  ------O(n) since the most will traverse through all elements in the array

//#3 approach
//use hashing method 
//time complexity O(n)
