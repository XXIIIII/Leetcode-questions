# Sliding window approach 
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        sum_p = 0
        sum_s = 0
        ans = []
        char_p = {} # include all char appear in string p
        char_s = {}
        missing = 0 # keep track how many char not yet been fully found

        if len(p) > len(s):
            return ans

        for char in p:
            if char not in char_p:
                char_p[char] = 0
                missing += 1
            char_p[char] += 1

        for i in range(len(s)):
            if i >= len(p):
                if s[i-len(p)] in char_s:
                    if char_s[s[i-len(p)]] == char_p[s[i-len(p)]]: # only increment missing if it was exactly equal before removal, not just if it's now less!!
                        missing += 1
                    char_s[s[i-len(p)]] -= 1
                    
            if s[i] in char_p:
                char_s[s[i]] = char_s.get(s[i], 0) + 1
                if char_s[s[i]] == char_p[s[i]]:
                    missing -= 1
                
            if missing == 0:
                ans.append(i-len(p)+1)

        return ans

# Sliding window + Compare dictionary directly
class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """

        ans = []
        char_p = {} # include all char appear in string p
        char_s = {}

        if len(p) > len(s):
            print(ans)

        for char in p:
            char_p[char] = char_p.get(char, 0) + 1

        for i in range(len(s)):
            if i >= len(p):
                if s[i-len(p)] in char_p:
                    char_s[s[i-len(p)]] -= 1
                    
            if s[i] in char_p:
                char_s[s[i]] = char_s.get(s[i], 0) + 1
                    
            if char_p == char_s:
                ans.append(i-len(p)+1)
        
        return ans

    
    



        

        
